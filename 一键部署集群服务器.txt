两种一键部署方案
1、使用expect非交互是ssh秘钥互信，脚本分发及执行
[root@m01 oldboy]# tree -L 2 /home/oldboy/
/home/oldboy/
├── auto_deploy.sh
├── fenfa_scripts.sh
├── fenfa_sshkey.exp
├── fenfa_sshkey.sh
├── m01sctipts2018-04-18
│   └── m01_2018-04-18.tar.gz
├── scripts
│   ├── 01_one_rsync_Server.sh
│   ├── 02_two_rsync_client.sh
│   ├── 03_Inotify+SersynCrsync.sh
│   ├── 04_mysql_db.sh
│   ├── 05_yum-one_lnmp.sh
│   ├── 06_yum-one_lamp.sh
│   ├── 07_nginx_lb01.sh
│   ├── 08_nginx_lb02.sh
│   └── S\351\235\236yum\347\211\210\350\204\232\346\234\254
├── tools
└── view_ip.sh

2、使用saltstack，脚本推送及执行
/srv/salt/
├── backup
│   └── backup_config.sls
├── crontab.sls
├── del_cron.sls
├── files
│   ├── 01_one_rsync_Server.sh
│   ├── 02_two_rsync_client.sh
│   ├── 03_Inotify+SersynCrsync.sh
│   ├── 04_expect_fenfa_m01.sh
│   ├── host_file.sls
│   ├── inotify.sh
│   ├── nginx_lb01.sh
│   └── nginx_lb02.sh
├── inotify
│   └── inotify.install.sls
├── lamp.sls
├── nfs
│   └── nfs_install.sls
├── nfsbackup
│   └── nfsbackup_file.sls
├── nginx_install.sls
├── rsync
│   └── rsync_install.sls
├── scripts
│   ├── 01_one_rsync_Server.sh
│   ├── 02_two_rsync_client.sh
│   ├── 03_Inotify+SersynCrsync.sh
│   ├── chback.sh
│   ├── mysql_db.sh
│   ├── nginx_lb01.sh
│   ├── nginx_lb02.sh
│   ├── yum-one_lamp.sh
│   └── yum-one_lnmp.sh
├── system.log
├── top.sls
├── web
│   └── web_config.sls
└── yum-one_lamp.sh

8 directories, 30 files

salt 'backup' cp.get_file salt://scripts/01_one_rsync_Server.sh /home/oldboy/01_one_rsync_Server.sh
salt 'backup' cmd.run '/bin/sh /home/oldboy/01_one_rsync_Server.sh' &
salt 'nfs01' cp.get_file salt://scripts/02_two_rsync_client.sh /home/oldboy/02_two_rsync_client.sh 
salt 'nfs01' cmd.run '/bin/sh /home/oldboy/02_two_rsync_client.sh' &
salt 'db01' cp.get_file salt://scripts/mysql_db.sh /home/oldboy/mysql_db.sh 
salt 'db01' cmd.run '/bin/sh /home/oldboy/mysql_db.sh' &
salt 'web01' cp.get_file salt://scripts/yum-one_lnmp.sh /home/oldboy/yum-one_lnmp.sh 
salt 'web01' cmd.run '/bin/sh /home/oldboy/yum-one_lnmp.sh' &
salt 'web01' cp.get_file salt://scripts/03_Inotify+SersynCrsync.sh /home/oldboy/03_Inotify+SersynCrsync.sh 
salt 'web01' cmd.run '/bin/sh /home/oldboy/03_Inotify+SersynCrsync.sh' &
salt 'web02' cp.get_file salt://scripts/yum-one_lamp.sh /home/oldboy/yum-one_lamp.sh 
salt 'web02' cmd.run '/bin/sh /home/oldboy/yum-one_lamp.sh' &
salt 'web02' cp.get_file salt://scripts/03_Inotify+SersynCrsync.sh /home/oldboy/03_Inotify+SersynCrsync.sh 
salt 'web02' cmd.run '/bin/sh /home/oldboy/03_Inotify+SersynCrsync.sh' &
salt 'lb01' cp.get_file salt://scripts/nginx_lb01.sh /home/oldboy/nginx_lb01.sh
salt 'lb01' cmd.run '/bin/sh /home/oldboy/nginx_lb01.sh' &
salt 'lb02' cp.get_file salt://scripts/nginx_lb02.sh /home/oldboy/nginx_lb02.sh 
salt 'lb02' cmd.run '/bin/sh /home/oldboy/nginx_lb02.sh' &


#一键集群思路#
一.清单顺序
1、完成调试各服务器上的脚本；
2、将脚本用m01管理机推送到各服务上
3、使用管理机实现批量脚本执行
4、整体服务调试
1）BACKUP服务器
2）nfs01服务器
3）db01数据库服务器
4）web01服务器(nginx)
5）web02服务器（apache）
6）lb01负载均衡服务器
7）lb02负载均衡服务器
8）m01-批量管理服务器

二、完成如下服务的一键安装配置脚本
###backup服务器 ###脚本-
01_one_rsync_Server 
chback.sh 

###nfs服务器 ###脚本-
02_two_rsync_client  


mysql服务器 脚本-
mysql_db   
     
###web01服务器（LNMP）### 脚本-
03_Inotify+SersynCrsync 
one_lnmp  


###web02服务器(LAMP)### 脚本-
one_lamp   
03_Inotify+SersynCrsync 


###lb01服务器### 脚本-
nginx_lb01 

###lb02服务器 ###脚本-
nginx_lb02 


m01服务器 脚本-   

三、测试每台服务器脚本是否成立
测试机器-web01-调试

四、将脚本用m01管理机推送到各服务上
lb01 完成 推送及部署
lb02 完成 推送及部署
web01 完成 推送及部署
web02 完成 推送及部署
db01  完成 推送及部署
nfs01 完成 推送及部署
backup 完成 推送及部署
m01-提前准备好各个脚本



负载均衡-练习lb01 lb02
1、初始状态虚拟机做快照
2、调试一键部署脚本 sh -x 

sed -i 's#\#id:#id: lb02#' /etc/salt/minion
sed -i 's#\#master: salt#master: 172.16.1.61#' /etc/salt/minion
/etc/init.d/salt-minion restart

sed -i 's#\#id:#id: lb01#' /etc/salt/minion
sed -i 's#\#master: salt#master: 172.16.1.61#' /etc/salt/minion
/etc/init.d/salt-minion restart

sed -i 's#\#id:#id: db01#' /etc/salt/minion
sed -i 's#\#master: salt#master: 172.16.1.61#' /etc/salt/minion
/etc/init.d/salt-minion restart